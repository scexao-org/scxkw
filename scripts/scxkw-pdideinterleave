#!/usr/bin/env python
'''
    Deinterleave a (compliant) FITS files into two FLC state files.

    Filename will be resolved from CWD.

    Filename - ".fits" + ".txt" is expected to provide the logshim timing file.
    
    Usage:
        scxkw-pdideinterleave <fits_filename> [--keep] [--dstream=<dstream>]

    Options:
        -h --help        Show this
        --keep           Keep the original, interleaved file. Otherwise it's deleted.
        --dstream=<dstream>      replacement stream name
'''
from __future__ import annotations
import typing as typ

import logging


import os

from astropy.io import fits

from scxkw.tools.file_obj import FitsFileObj
from scxkw.tools.pdi_deinterleave import deinterleave_file, deinterleave_filechecker



class RETCODE:
    NOT_DOTFITS = 1
    NO_FITS = 2
    NO_TXT = 3
    MISSING_KW = 4
    NO_DEINT_REQ = 5
    OOPS = 6
    SUCCESS = 0


if __name__ == "__main__":

    from swmain.infra.logger import init_logger_autoname
    init_logger_autoname()
    logg = logging.getLogger(__name__)
    

    from docopt import docopt
    args = docopt(__doc__)
    
    NEW_STREAM = args['--dstream']


    fits_filename: str = args['<fits_filename>']

    # Validate files.
    if not fits_filename.endswith('.fits'):
        logg.warning(f'scxkw-pdideinterleave - {fits_filename} NOT DOTFITS')
        exit(RETCODE.NOT_DOTFITS)

    if not os.path.isfile(fits_filename):
        logg.warning(f'scxkw-pdideinterleave - {fits_filename} NO FITS')
        exit(RETCODE.NO_FITS)

    txt_filename = fits_filename[:-5] + '.txt'
    if not os.path.isfile(txt_filename):
        logg.warning(f'scxkw-pdideinterleave - {fits_filename} NO TXT')
        exit(RETCODE.NO_TXT)

    file_obj = FitsFileObj(fits_filename)

    # Validate header
    header = file_obj.fits_header
    if header['DETECTOR'] in ['CRED1 - APAPANE', 'CRED2 - PALILA']:
        ir_true_vis_false = True
        flc_jitt = int(header['X_IFLCJT'])
    elif header['DETECTOR'] in ['VCAM1 - OrcaQ', 'VCAM2 - OrcaQ']:
        ir_true_vis_false = False
        flc_jitt = 30
    else:
        logg.warning(f'scxkw-pdideinterleave - {fits_filename} OOPS.')
        exit(RETCODE.OOPS)

    ok_deint = deinterleave_filechecker([file_obj])[0]

    # Validate this is as expected:
    if not ok_deint:
        logg.warning(f'scxkw-pdideinterleave - {fits_filename} NO DEINT REQUIRED.')
        exit(RETCODE.NO_DEINT_REQ)

    # Call the deinterleave job
    # ir_true_vis_false should be directly replace by the appropriate FITS
    # key for X_IFLCST / U_??????
    deint_files = deinterleave_file(file_obj,
                                    ir_true_vis_false=ir_true_vis_false,
                                    flc_jitter_us_hint = flc_jitt,
                                    write_to_disk=False)
    
    for fkey in deint_files:
        deint_files[fkey].move_file_to_streamname(NEW_STREAM)
        deint_files[fkey].write_to_disk()
    

    # Be careful here... what happens if we had an error?
    # DO NOT catch errors from deinterleave!!!
    # Or catch and exit immediately?
    if not args['--keep']:
        file_obj.delete_from_disk()

    exit(RETCODE.SUCCESS)

    