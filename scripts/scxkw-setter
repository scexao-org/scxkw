#!/usr/bin/env python

'''
    Setter script for external calls to the keyword database
    Maintains retrocompatibility with scexaostatus by forwarding all relevant calls
    This will be done by symlinking this to ~/bin/scexaostatus

    New calls should use the 8 char FITS key
    Or newly defined SHM keys, but then a spurious call would be dispatched to old scexaostatus
    which wouldn't know the key and just do nothing.

    Usage:
        scxkw-setter [--] (create|disp)
        scxkw-setter [--] set <name> <value> [<color>]

'''

import docopt
import os, sys

LEGACY_EXEC = '/home/scexao/Instrument-Control-Main/src/SCExAO_status/scexaostatus'

if __name__ == '__main__':
    #print(sys.argv)
    # Be dirty and sneaky and make negative arguments legal by throwing in a "--"
    sys.argv = [sys.argv[0]] + ['--'] + sys.argv[1:]
    args = docopt.docopt(__doc__)

    if args['create']:
        ret = os.system(LEGACY_EXEC + ' create')
        sys.exit(ret)

    if args['disp']:
        ret = os.system(LEGACY_EXEC + ' disp')
        sys.exit(ret)

    # Now, this is a set !

    name = args['<name>']
    value = args['<value>']
    color = args['<color>'] # Color can be a None

    from scxkw.redisutil.typed_db import Redis
    from scxkw.config import REDIS_DB_HOST, REDIS_DB_PORT
    rdb = Redis(host=REDIS_DB_HOST, port=REDIS_DB_PORT)

    # Is this an old style, SHM-id call ? -> ...
    test = rdb.hget('map:shm_lookup', name)
    if test is not None: # -> It is
        name_kw = test
    else: # -> It ain't
        name_kw = name
        # Avoid the propagation of mis-types of SHM names from the db
        if not rdb.exists(name_kw):
            print(f'scxkw warning: sollicited key "{name_kw}" does not exist')
            print(f"DEBUG: name {name}, value {value}, color {color}")
            name_kw = None

    # Set the database
    if name_kw is not None:
        with rdb.pipeline() as pipe:
            pipe.hset(name_kw, 'value', value)
            if color is not None:
                pipe.hset(name_kw, 'color', color)
            pipe.execute()


