#!/bin/env python
'''
Synchronization of VAMPIRES data using framelist files.

vcam1, vcam2 -> vsolo1, vsolo2, vsync, vbad

Usage:
    scxkw-vamp-summary <DATE> [--fits] [--fz]
    scxkw-vamp-summary -f <FOLDER> [--fits] [--fz]

Options:
    --fits  Use fits files instead of fitsframes files
    --fz    Use fits.fz file instead of fitsframes files
'''

from pathlib import Path

import docopt
from datetime import datetime

# FIXME start logger.

from scxkw.config import GEN2PATH_NODELETE
from scxkw.tools import file_tools
from scxkw.tools.framelist_file_obj import FrameListFitsFileObj
from scxkw.tools.fits_file_obj import FitsFzFileObj

if __name__ == "__main__":


    args = docopt.docopt(__doc__)

    FOLDER = args['<FOLDER>']
    DATE = args['<DATE>']
    DO_FITS = args['--fits']
    DO_FZ = args['--fz']

    if FOLDER is None:
        dateFolderPath = Path(GEN2PATH_NODELETE) / DATE
    else:
        dateFolderPath = Path(FOLDER)
        DATE = dateFolderPath.name

    assert (dateFolderPath.is_absolute() and dateFolderPath.is_dir())
    
    # We need to load all the txts and all the frame times
    if DO_FITS:
        fobjs = file_tools.make_fileobjs_from_globs(
            [str(dateFolderPath) + '/vgen2/*.fits'], [])
    elif DO_FZ:
        fobjs = file_tools.make_fileobjs_from_globs(
            [str(dateFolderPath) + '/vgen2/*.fits.fz'], [],
            type_to_use=FitsFzFileObj)
    else:
        fobjs = file_tools.make_fileobjs_from_globs(
            [str(dateFolderPath) + '/vgen2/*.fitsframes'], [],
            type_to_use=FrameListFitsFileObj)
        
    time_midnight_ut = datetime.strptime(DATE + 'T' + '00:00:00',
                                         '%Y%m%dT%H:%M:%S').timestamp()
    
    fojbs_bak = fobjs.copy()
    
    min_slice = 1
    for n_min_slice in range((1440 + min_slice - 1) // min_slice):
        frame_dict = {}
        targets = set()
        exptimes = set()

        
        while True:
            if len(fobjs) == 0:
                break


            time = fobjs[0].get_start_unixtime_secs()
            if (time - time_midnight_ut) > min_slice*60*(n_min_slice+1):
                break

            fobj = fobjs.pop(0)
            targets.add(fobj.fits_header['OBJECT'])
            exptimes.add(fobj.fits_header['EXPTIME'])

            key = (fobj.stream_from_filename, ''.join(fobj.full_filepath.suffixes[1:-1]))
            # We could just use get_nframes() to count... but just to say
            # this is a good place for more advanced stats as well.
            frame_dict[key] = frame_dict.get(key, 0) + fobj.get_nframes()

        if len(frame_dict) > 0:
            t_A = datetime.fromtimestamp(time_midnight_ut + min_slice*60*n_min_slice - 36000
                                         ).strftime('%H:%M:%S')
            t_B = datetime.fromtimestamp(time_midnight_ut + min_slice*60*(n_min_slice+1) - 36000 - 1
                                         ).strftime('%H:%M:%S')
            print(f'{t_A} -- {t_B}; targets {targets}; exptimes {exptimes}')
            keys = list(frame_dict.keys())
            keys.sort()
            for k in keys:
                print('\t\t%-20s' % str(k) + f'\t\t{frame_dict[k]}')
