#!/bin/env python
import argparse
import logging
from pathlib import Path

import docopt
from datetime import datetime


# set up logging
logger = logging.getLogger("scxkw-vamp-summary")
stream_handler = logging.StreamHandler()
stream_handler.setLevel(logging.INFO)
logger.addHandler(stream_handler)

from scxkw.config import GEN2PATH_NODELETE
from scxkw.tools import file_tools
from scxkw.tools.framelist_file_obj import FrameListFitsFileObj
from scxkw.tools.fits_file_obj import FitsFzFileObj

# prepare arg parsing
parser = argparse.ArgumentParser(
    "scxkw-vamp-summary",
    description="Summarize VAMPIRES synchronization output.",
    epilog="If you run into problems, contacnt vdeo or mlucas (TODO make undo script)."
)
parser.add_argument("folder", type=Path, help="Root folder containing the `vgen2` subfolder")
parser.add_argument("--fits", action="store_true", help="Use fits files instead of fitsframes files")
parser.add_argument("--fz", action="store_true", help="Use fits.fz files instead of fitsframes files")


def main():
    # prepare local debug log
    debug_path = Path.cwd() / "syncdeint_debug.log"
    file_handler = logging.FileHandler(debug_path)
    file_handler.setLevel(logging.DEBUG)
    logger.addHandler(file_handler)
    logger.info(f"Saving debug log to {debug_path}")

    args = parser.parse_args()
    logger.debug("Parsed arguments:")
    logger.debug(args)

    folderPath = args.folder.absolute()
    logger.debug(f"Absolute path: {folderPath}")

    assert (folderPath.is_absolute() and folderPath.is_dir())
    
    # We need to load all the txts and all the frame times
    if args.fits:
        glob_str = f"{folderPath}/vgen2/*.fits"
        fobjs = file_tools.make_fileobjs_from_globs([glob_str], [])
    elif args.fz:
        glob_str = f"{folderPath}/vgen2/*.fits.fz"
        fobjs = file_tools.make_fileobjs_from_globs([glob_str], [], type_to_use=FitsFzFileObj)
    else:
        glob_str = f"{folderPath}/vgen2/*.fitsframes"
        fobjs = file_tools.make_fileobjs_from_globs([glob_str], [], type_to_use=FrameListFitsFileObj)
        
    # parse date from fileobjs
    date = fobjs[-1].fits_header["DATE-OBS"]
    time_midnight_ut = datetime.strptime(f"{date}T00:00:00", "%Y-%m-%dT%H:%M:%S").timestamp()

    # N.B.: Miles- not gonna touch below this line
    min_slice = 1
    for n_min_slice in range((1440 + min_slice - 1) // min_slice):
        frame_dict = {}
        targets = set()
        exptimes = set()

        
        while True:
            if len(fobjs) == 0:
                break

            time = fobjs[0].get_start_unixtime_secs()
            if (time - time_midnight_ut) > min_slice*60*(n_min_slice+1):
                break

            fobj = fobjs.pop(0)
            targets.add(fobj.fits_header['OBJECT'])
            exptimes.add(fobj.fits_header['EXPTIME'])

            key = (fobj.stream_from_filename, ''.join(fobj.full_filepath.suffixes[1:-1]))
            # We could just use get_nframes() to count... but just to say
            # this is a good place for more advanced stats as well.
            frame_dict[key] = frame_dict.get(key, 0) + fobj.get_nframes()

        if len(frame_dict) > 0:
            t_A = datetime.fromtimestamp(time_midnight_ut + min_slice*60*n_min_slice - 36000
                                         ).strftime('%H:%M:%S')
            t_B = datetime.fromtimestamp(time_midnight_ut + min_slice*60*(n_min_slice+1) - 36000 - 1
                                         ).strftime('%H:%M:%S')
            print(f'{t_A} -- {t_B}; targets {targets}; exptimes {exptimes}')
            keys = list(frame_dict.keys())
            keys.sort()
            for k in keys:
                print('\t\t%-20s' % str(k) + f'\t\t{frame_dict[k]}')


if __name__ == "__main__":
    main()
