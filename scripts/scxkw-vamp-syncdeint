#!/bin/env python
import argparse
import logging
import os
from pathlib import Path
import subprocess as sproc
import typing as typ


from scxkw.config import GEN2PATH_NODELETE
from scxkw.tools import file_tools
from scxkw.tools import pdi_deinterleave as pdi
from scxkw.tools.framelist_file_obj import FrameListFitsFileObj
from scxkw.tools.vampires_synchro import VampiresSynchronizer

# set up logging
logger = logging.getLogger("scxkw-vamp-syncdeint")
stream_handler = logging.StreamHandler()
stream_handler.setLevel(logging.INFO)
logger.addHandler(stream_handler)

# prepare arg parsing
parser = argparse.ArgumentParser(
    "scxkw-vamp-syncdeint",
    description="Synchronization of VAMPIRES data using framelist files.",
    epilog="If you run into problems, contacnt vdeo or mlucas (TODO make undo script)."
)
parser.add_argument("folder", type=Path, help="Root folder containing the `vcam*` subfolders")
parser.add_argument("-s", "--sync-only", action="store_true", help="Synchronize files ONLY (vcam1, vcam2) -> (vbad, vsolo1, vsolo2, vsync). Normally files get synchronized as well as deinterleaved and prepared for gen2, this only synchronizes.")

def main():
    # prepare local debug log
    debug_path = Path.cwd() / "syncdeint_debug.log"
    file_handler = logging.FileHandler(debug_path)
    file_handler.setLevel(logging.DEBUG)
    logger.addHandler(file_handler)
    logger.info(f"Saving debug log to {debug_path}")

    args = parser.parse_args()
    logger.debug("Parsed arguments:")
    logger.debug(args)

    folderPath = args.folder.absolute()
    logger.debug(f"Absolute path: {folderPath}")


    ## Check folder has expected layout (vcam1, vcam2)
    if not folderPath.is_dir():
        msg = f"{folderPath} was not recognized as a directory"
        raise ValueError(msg)
    
    vcam1Path = folderPath / "vcam1"
    if not vcam1Path.is_dir():
        msg = f"Could not find 'vcam1' directory"
        raise ValueError(msg)
    
    vcam2Path = folderPath / "vcam2"
    if not vcam2Path.is_dir():
        msg = f"Could not find 'vcam2' directory"
        raise ValueError(msg)

    sync_only = args.sync_only

    lfobjs: typ.Dict[Path, typ.Any] = {}
    for path in (vcam1Path, vcam2Path):
        ## Hardlink backup of subdirs as-is
        og_path = str(path.absolute())
        hlink_path = f"{og_path}_hlinkbak"
        sproc.check_output(['cp', '-TlR', og_path, hlink_path])
        logger.debug(f"Created hardlink dir {og_path} -> {hlink_path}")

        

        ## Initial fileobjs + UT glitch sanitize
        glob = f"{og_path}/*.fits"
        fobjs = file_tools.make_fileobjs_from_globs([glob], [])
        lfobjs[path] = []
        for fo in fobjs:
            fo.ut_sanitize()
            ## Conversion to FileListFitsFileObj -- assuming we have a txt file.
            lfobj = file_tools.convert_to_filelist_obj(fo)
            lfobj.write_to_disk()
            lfobjs[path].append(lfobj)




    # v1_fobjs = file_tools.make_fileobjs_from_globs([str(folderPath) + '/vcam1/*.fits'], [])
    # v2_fobjs = file_tools.make_fileobjs_from_globs([str(folderPath) + '/vcam2/*.fits'], [])
    # for fo in v1_fobjs:
    #     fo.ut_sanitize()
    # for fo in v2_fobjs:
    #     fo.ut_sanitize()

    
    # ## Conversion to FileListFitsFileObj -- assuming we have a txt file.
    # v1_lfobjs = [file_tools.convert_to_filelist_obj(fo) for fo in v1_fobjs]
    # v2_lfobjs = [file_tools.convert_to_filelist_obj(fo) for fo in v2_fobjs]
    # #FrameListFitsFileObj.DEBUG = True
    # [fo.write_to_disk() for fo in v1_lfobjs]
    # [fo.write_to_disk() for fo in v2_lfobjs]

    
    ## Synchronization
    syncer = VampiresSynchronizer(auto_tolerancing=True)
    syncer.feed_file_objs(lfobjs[vcam1Path])
    syncer.feed_file_objs(lfobjs[vcam2Path])

    while syncer.process_queues(10):
        pass

    assert (
        len(syncer.queue1) == 0 and len(syncer.queue2) == 0 and
        syncer.out_files[1] is None and syncer.out_files[2] is None and
        len(syncer.out_queues[1]) == 0 and len(syncer.out_queues[2]) == 0
    ) # TODO: syncer.is_completed()

    ## PDI Deinterleaving
    if not sync_only:
        ## Find straggler fits files and convert them to fitsframes files
        v_fobjs = file_tools.make_fileobjs_from_globs([str(folderPath) + '/vsync/*.fits',
                                                      str(folderPath) + '/vsolo1/*.fits',
                                                      str(folderPath) + '/vsolo2/*.fits',], [])
        v_lfobjs = [file_tools.convert_to_filelist_obj(fo) for fo in v_fobjs]
        [fo.write_to_disk() for fo in v_lfobjs]

        ## List Framelist objects
        all_fobjs = file_tools.make_fileobjs_from_globs(
            [str(folderPath) + '/vsync/*.fitsframes',
            str(folderPath) + '/vsolo1/*.fitsframes',
            str(folderPath) + '/vsolo2/*.fitsframes',], [],
            type_to_use=FrameListFitsFileObj)

        ## Actual deinterleaving
        deinterleaver = pdi.SyncPDIDeintManager()
        for fobj in all_fobjs:
            ret = deinterleaver.run_pdi_deint_job(fobj, 'vgen2')
            if ret == pdi.PDIJobCodeEnum.NOTHING:
                fobj.move_file_to_streamname('vgen2')

    logger.info("syncdeint complete")


if __name__ == "__main__":
    main()
