#!/bin/env python
import argparse
import logging
from pathlib import Path
import subprocess as sproc
import typing as typ


from scxkw.tools import file_tools
from scxkw.tools import pdi_deinterleave as pdi
from scxkw.tools.framelist_file_obj import FrameListFitsFileObj
from scxkw.tools.vampires_synchro import VampiresSynchronizer

# set up logging
logger = logging.getLogger("scxkw-vamp-syncdeint")
stream_handler = logging.StreamHandler()
stream_handler.setLevel(logging.INFO)
logger.addHandler(stream_handler)

# prepare arg parsing
parser = argparse.ArgumentParser(
    "scxkw-vamp-syncdeint",
    description="Synchronization of VAMPIRES data using framelist files.",
    epilog="If you run into problems, contacnt vdeo or mlucas (TODO make undo script)."
)
parser.add_argument("folder", type=Path, help="Root folder containing the `vcam*` subfolders")
parser.add_argument("-s", "--sync-only", action="store_true", help="Synchronize files ONLY (vcam1, vcam2) -> (vbad, vsolo1, vsolo2, vsync). Normally files get synchronized as well as deinterleaved and prepared for gen2, this only synchronizes.")


def hardlink_backup(path: Path, suffix: str="hlinkbak"):
    ## Hardlink backup of subdirs as-is
    og_path = str(path.absolute())
    hlink_path = f"{og_path}_{suffix}"
    sproc.check_output(["cp", "-TlR", og_path, hlink_path])
    logger.debug(f"Created hardlink dir {og_path} -> {hlink_path}")

def _sanitize_and_convert(fileobj):
    fileobj.ut_sanitize()
    ## Conversion to FrameListFitsFileObj -- assuming we have a txt file.
    framelistobj = file_tools.convert_to_filelist_obj(fileobj)
    framelistobj.write_to_disk()
    return framelistobj

def create_filelists(path: Path, glob: str="*.fits") -> typ.List[FrameListFitsFileObj]:
    ## Initial fileobjs + UT glitch sanitize
    glob_pattern = f"{path}/{glob}"
    fileobjs = file_tools.make_fileobjs_from_globs([glob_pattern], [])
    framelist = [_sanitize_and_convert(fo) for fo in fileobjs]
    return framelist

def main():
    # prepare local debug log
    debug_path = Path.cwd() / "syncdeint_debug.log"
    file_handler = logging.FileHandler(debug_path)
    file_handler.setLevel(logging.DEBUG)
    logger.addHandler(file_handler)
    logger.info(f"Saving debug log to {debug_path}")

    args = parser.parse_args()
    logger.debug("Parsed arguments:")
    logger.debug(args)

    folderPath = args.folder.absolute()
    logger.debug(f"Absolute path: {folderPath}")


    ## Check folder has expected layout (vcam1, vcam2)
    if not folderPath.is_dir():
        msg = f"{folderPath} was not recognized as a directory"
        raise ValueError(msg)

    vcam_paths = []
    vcam1Path = folderPath / "vcam1"
    vcam1_exists = vcam1Path.is_dir()

    vcam2Path = folderPath / "vcam2"
    vcam2_exists = vcam2Path.is_dir()

    if not (vcam1_exists or vcam2_exists):
        msg = f"Could not find 'vcam1' or 'vcam2' directory. Check {folderPath}"
        raise ValueError(msg)
    elif not vcam1_exists:
        msg = f"Could not find 'vcam1' directory; ignoring it"
        logger.warning(msg)
    elif not vcam2_exists:
        msg = f"Could not find 'vcam2' directory; ignoring it"
        logger.warning(msg)

    sync_only = args.sync_only

    lfobjs: typ.Dict[Path, typ.Any] = {}
    ## Hardlink backup of subdirs as-is
    ## Initial fileobjs + UT glitch sanitize
    if vcam1_exists:
        hardlink_backup(vcam1Path)
        lfobjs[vcam1Path] = create_filelists(vcam1Path)
    if vcam2_exists:
        hardlink_backup(vcam2Path)
        lfobjs[vcam2Path] = create_filelists(vcam2Path)

    ## Synchronization
    syncer = VampiresSynchronizer(auto_tolerancing=True)
    for lfo in lfobjs.values():
        syncer.feed_file_objs(lfo)
    
    while syncer.process_queues(10):
        pass

    assert (
        len(syncer.queue1) == 0 and len(syncer.queue2) == 0 and
        syncer.out_files[1] is None and syncer.out_files[2] is None and
        len(syncer.out_queues[1]) == 0 and len(syncer.out_queues[2]) == 0
    ) # TODO: syncer.is_completed()

    ## PDI Deinterleaving
    if not sync_only:
        ## Find straggler fits files and convert them to fitsframes files
        v_fobjs = file_tools.make_fileobjs_from_globs([str(folderPath) + '/vsync/*.fits',
                                                      str(folderPath) + '/vsolo1/*.fits',
                                                      str(folderPath) + '/vsolo2/*.fits',], [])
        v_lfobjs = [file_tools.convert_to_filelist_obj(fo) for fo in v_fobjs]
        [fo.write_to_disk() for fo in v_lfobjs]

        ## List Framelist objects
        all_fobjs = file_tools.make_fileobjs_from_globs(
            [str(folderPath) + '/vsync/*.fitsframes',
            str(folderPath) + '/vsolo1/*.fitsframes',
            str(folderPath) + '/vsolo2/*.fitsframes',], [],
            type_to_use=FrameListFitsFileObj)

        ## Actual deinterleaving
        deinterleaver = pdi.SyncPDIDeintManager()
        for fobj in all_fobjs:
            ret = deinterleaver.run_pdi_deint_job(fobj, 'vgen2')
            if ret == pdi.PDIJobCodeEnum.NOTHING:
                fobj.move_file_to_streamname('vgen2')

    logger.info("syncdeint complete")


if __name__ == "__main__":
    main()
